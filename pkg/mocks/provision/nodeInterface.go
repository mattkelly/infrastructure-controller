// Code generated by mockery v1.0.0. DO NOT EDIT.

package provision

import mock "github.com/stretchr/testify/mock"

import types "github.com/containership/csctl/cloud/provision/types"

// NodeInterface is an autogenerated mock type for the NodeInterface type
type NodeInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *NodeInterface) Create(_a0 *types.Node) (*types.Node, error) {
	ret := _m.Called(_a0)

	var r0 *types.Node
	if rf, ok := ret.Get(0).(func(*types.Node) *types.Node); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*types.Node) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *NodeInterface) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *NodeInterface) Get(id string) (*types.Node, error) {
	ret := _m.Called(id)

	var r0 *types.Node
	if rf, ok := ret.Get(0).(func(string) *types.Node); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *NodeInterface) List() ([]types.Node, error) {
	ret := _m.Called()

	var r0 []types.Node
	if rf, ok := ret.Get(0).(func() []types.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
